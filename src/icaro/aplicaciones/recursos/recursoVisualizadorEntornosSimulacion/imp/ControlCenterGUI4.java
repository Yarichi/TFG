/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ControlCenterGui2.java
 *
 * Created on 29-dic-2011, 20:42:57
 */
package icaro.aplicaciones.recursos.recursoVisualizadorEntornosSimulacion.imp;

import icaro.aplicaciones.Rosace.informacion.VocabularioRosace;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author FGarijo
 */
public class ControlCenterGUI4 extends javax.swing.JFrame {

	
	/** Creates new form ControlCenterGui2 */
	private ControladorVisualizacionSimulRosace controladorEscSim;
	public static int intervaloSecuencia = 1; // valor por defecto. Eso deberia ponerse en otro sitio
	private int numMensajesEnviar = 3;
	private boolean primeraVictima = true;
	private VisorEscenariosRosace visorSc;
	private ArrayList<String> identsRobotsEquipo;
	private ArrayList<String> identsVictimsEquipo;
	private String identVictimaSeleccionada=null;
	private String identRobotSeleccionado=null;
	private String identEquipo="indefinido";
	private String[] funcionesEvaluacion = {"FuncionEvaluacion1","FuncionEvaluacion2","FuncionEvaluacion3"};
	
	public ControlCenterGUI4() {
		initComponents();

	}
	public ControlCenterGUI4( ControladorVisualizacionSimulRosace controlador) {
		this.controladorEscSim = controlador;
		initComponents();
		jButtonStart.setEnabled(false);
		listaComponentes.setVisible(false);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	private void initComponents() {

		listaComponentes = new javax.swing.JList();

		jPopupMenuAcionesRobots = new javax.swing.JPopupMenu();
		jMenuItemParar = new javax.swing.JMenuItem();
		jSeparator2 = new javax.swing.JPopupMenu.Separator();
		jMenuItemVerEstado = new javax.swing.JMenuItem();
		jFileChooser1 = new javax.swing.JFileChooser();
		jButtonSendVictim = new javax.swing.JButton();
		jButtonSendVictimsSequence = new javax.swing.JButton();
		jtextTextFieldIntervaloEnvioMensajes = new javax.swing.JTextField();
		jButtonStart = new javax.swing.JButton();
		jPararEnvioMensajes = new javax.swing.JButton();
		jButtonMostrarEscenarioActual = new javax.swing.JButton();
		jScrollPanelistaIdentsVictimas = new javax.swing.JScrollPane();
		jListIdentsVictims = new javax.swing.JList();
		jScrollPaneIdentsRobots = new javax.swing.JScrollPane();
		jlistIdentsRobots = new javax.swing.JList();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jTextFieldIdentEscenarioActual = new javax.swing.JTextField();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		jLabel7 = new javax.swing.JLabel();
		jMenuBarEditorEsc = new javax.swing.JMenuBar();
		jMenuEditarEscenario = new javax.swing.JMenu();
		jMenuItemAbrirEscenario = new javax.swing.JMenuItem();
		jSeparator5 = new javax.swing.JPopupMenu.Separator();
		jMenuItemCrearEscenario = new javax.swing.JMenuItem();
		jSeparator6 = new javax.swing.JPopupMenu.Separator();
		jMenuItemEliminarEscenario = new javax.swing.JMenuItem();
		jSeparator8 = new javax.swing.JPopupMenu.Separator();
		jSeparator1 = new javax.swing.JPopupMenu.Separator();
		jMenuItemSalir = new javax.swing.JMenuItem();
		jMenu2 = new javax.swing.JMenu();
		jMenuItem1 = new javax.swing.JMenuItem();
		jMenuItem2 = new javax.swing.JMenuItem();
		jMenu3 = new javax.swing.JMenu();
		jButtonActivarJerarquico = new javax.swing.JButton();
		
		jFuncionEvaluacion = new javax.swing.JComboBox<String>(this.funcionesEvaluacion);

		jPopupMenuAcionesRobots.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
			public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
			}
			public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
			}
			public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
				//jPopupMenuAcionesRobotsPopupMenuWillBecomeVisible(evt);
			}
		});
		if(ControladorVisualizacionSimulRosace.asignadorSeMueve)jButtonActivarJerarquico.setText("Desactivar(Actual: On)");
		else jButtonActivarJerarquico.setText("Activar(Actual: Off)");
		jButtonActivarJerarquico.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				jButtonActivarJerarquicoActionPerformed();
			}
		});
		
		/*if(ControladorVisualizacionSimulRosace.exploracionPrevia)jButtonActivarExploracion.setText("Desactivar exploracion previa(Actual: On)");
		else jButtonActivarExploracion.setText("Activar exploracion previa(Actual: Off)");
		jButtonActivarExploracion.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				jButtonActivacionExploracionActionPerformed();
			}
		});*/
		
		
		
		
		
		jMenuItemParar.setText("Parar robot");
		jMenuItemParar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				 jMenuItemPararActionPerformed(evt);
			}
		});
		jPopupMenuAcionesRobots.add(jMenuItemParar);
		
		jPopupMenuAcionesRobots.add(jSeparator2);

		jMenuItemVerEstado.setText("Reanudar robot");
		jPopupMenuAcionesRobots.add(jMenuItemVerEstado);

		jFileChooser1.setDialogTitle("Seleccion de escenario");
		jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				// jFileChooser1ActionPerformed(evt);
			}
		});

		setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
		setTitle("Centro de Control");

		jButtonSendVictim.setText("Salvar Victima");
		jButtonSendVictim.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonSendVictimActionPerformed(evt);
			}
		});

		jButtonSendVictimsSequence.setText("Salvar Victimas del escenario");
		jButtonSendVictimsSequence.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				sendVictimsSequenceActionPerformed(evt);
			}
		});

		jButtonStart.setText("Start");
		jButtonStart.setNextFocusableComponent(jPararEnvioMensajes);
		jButtonStart.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				//jButtonComenzarActionPerformed(evt);
				jButtonStartActionPerformed(evt);
			}
		});

		jPararEnvioMensajes.setText("Parar");
		jPararEnvioMensajes.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jPararEnvioMensajesActionPerformed(evt);
			}
		});

		jButtonMostrarEscenarioActual.setText("Mostrar Escenario actual");
		jButtonMostrarEscenarioActual.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonMostrarEscenarioActualActionPerformed(evt);


			}
		});
		
		jFuncionEvaluacion.setToolTipText("FuncionEvaluacion1: Simulacion con 1 explorador.FuncionEvaluacion2: Simulacion con 2 exploradores FuncionEvaluacion3: Sin exploracion priorizando a las victimas con menos tiempo vida. ");
		jFuncionEvaluacion.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				VocabularioRosace.funcionEvaluacionSeleccionada = (String) jFuncionEvaluacion.getSelectedItem();
				jFuncionEvaluacionActionPerformed();
			}
		});
		
		

		jListIdentsVictims.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jListIdentsVictimsMouseClicked(evt);
			}
		});
		jScrollPanelistaIdentsVictimas.setViewportView(jListIdentsVictims);

		jlistIdentsRobots.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jlistIdentsRobotsMouseClicked(evt);
			}
		});
		jScrollPaneIdentsRobots.setViewportView(jlistIdentsRobots);
		jlistIdentsRobots.getAccessibleContext().setAccessibleDescription("");

		jLabel3.setText("Robots ");

		jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
		jLabel4.setText("Ident Escenario de Simulacion:");

		jTextFieldIdentEscenarioActual.setEditable(false);
		jTextFieldIdentEscenarioActual.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				//jTextFieldIdentEscenarioActualActionPerformed(evt);
			}
		});

		jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
		jLabel5.setText("Centro de Control");

		jLabel6.setText("<html><body>Intervalo de envio  (ms)  <br>de mensajes </body></html>");

		jLabel7.setText("Victimas");

		jMenuEditarEscenario.setText("Editor Escenarios");

		jMenuItemAbrirEscenario.setText("Abrir Escenario");
		jMenuItemAbrirEscenario.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItemAbrirEscenarioActionPerformed(evt);
			}
		});
		jMenuEditarEscenario.add(jMenuItemAbrirEscenario);
		jMenuEditarEscenario.add(jSeparator5);

		jMenuItemCrearEscenario.setText("Crear Escenario");
		jMenuItemCrearEscenario.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItemCrearEscenarioActionPerformed(evt);
			}
		});
		jMenuEditarEscenario.add(jMenuItemCrearEscenario);
		jMenuEditarEscenario.add(jSeparator6);

		jMenuItemEliminarEscenario.setText("Eliminar este Escenario");
		jMenuItemEliminarEscenario.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				//jMenuItemEliminarEscenarioActionPerformed(evt);
			}
		});
		jMenuEditarEscenario.add(jMenuItemEliminarEscenario);
		jMenuEditarEscenario.add(jSeparator8);
		jMenuEditarEscenario.add(jSeparator1);

		jMenuItemSalir.setText("Salir");
		jMenuEditarEscenario.add(jMenuItemSalir);

		jMenuBarEditorEsc.add(jMenuEditarEscenario);

		jMenu2.setText("Simulador");

		jMenuItem1.setText("Mostrar Resultados simulacion");
		jMenu2.add(jMenuItem1);

		jMenuItem2.setText("Guardar resultados simulacion");
		jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				//jMenuItem2ActionPerformed(evt);
			}
		});
		jMenu2.add(jMenuItem2);

		jMenuBarEditorEsc.add(jMenu2);

		jMenu3.setText("Trazas");
		jMenuBarEditorEsc.add(jMenu3);

		setJMenuBar(jMenuBarEditorEsc);




		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
						.addGap(20, 20, 20)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(jButtonStart))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jPararEnvioMensajes)
												.addComponent(jtextTextFieldIntervaloEnvioMensajes, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addComponent(jButtonMostrarEscenarioActual)
								.addGroup(layout.createSequentialGroup()
										.addComponent(jFuncionEvaluacion)
										.addGap(45, 45, 45)
										.addComponent(jLabel4))
								.addComponent(jButtonActivarJerarquico)
								.addComponent(jButtonSendVictim)
								.addComponent(jButtonSendVictimsSequence))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
										.addGap(0, 12, Short.MAX_VALUE)
										.addComponent(jScrollPaneIdentsRobots, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addComponent(jTextFieldIdentEscenarioActual))
						.addGap(58, 58, 58))
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
										.addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(274, 274, 274))
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
												.addComponent(jScrollPanelistaIdentsVictimas, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
												.addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
										.addGap(120, 120, 120)
										.addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(156, 156, 156))))
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
						.addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel4)
								.addComponent(jTextFieldIdentEscenarioActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jFuncionEvaluacion)
								)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
										.addGap(18, 18, 18)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(layout.createSequentialGroup()
														.addGap(12, 12, 12)
														.addComponent(jScrollPaneIdentsRobots))
												.addGroup(layout.createSequentialGroup()
														.addGap(18, 18, 18)
														.addComponent(jScrollPanelistaIdentsVictimas)))
										.addContainerGap())
								.addGroup(layout.createSequentialGroup()
										.addGap(0, 107, Short.MAX_VALUE)
										.addComponent(jButtonMostrarEscenarioActual)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(jButtonActivarJerarquico)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(jButtonSendVictim)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(jButtonSendVictimsSequence)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
														.addComponent(jtextTextFieldIntervaloEnvioMensajes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addGap(106, 106, 106))
												.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
														.addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addGap(18, 18, 18)
														.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																.addComponent(jButtonStart)
																.addComponent(jPararEnvioMensajes))
														.addGap(55, 55, 55))))))
				);

		pack();
	}

	protected void jFuncionEvaluacionActionPerformed() {
		// TODO Auto-generated method stub
		this.controladorEscSim.configurarParametrosSimulacion();
	}
	/*protected void jButtonActivacionExploracionActionPerformed() {
		// TODO Auto-generated method stub
		if(controladorEscSim.exploracionPrevia){
			this.jButtonActivarExploracion.setText("Activar exploracion previa(Actual: Off)");
		}
		else{
			this.jButtonActivarExploracion.setText("Desactivar exploracion previa(Actual: On)");	
		}
		
		controladorEscSim.exploracionPrevia = !controladorEscSim.exploracionPrevia;
	}*/
	protected void jButtonActivarJerarquicoActionPerformed() {
		if(ControladorVisualizacionSimulRosace.asignadorSeMueve){
			this.jButtonActivarJerarquico.setText("Activar mov jefe(Actual: Off)");
		}
		else{
			this.jButtonActivarJerarquico.setText("Desactivar mov jefe(Actual: On)");
			
		}
		
		ControladorVisualizacionSimulRosace.asignadorSeMueve = !ControladorVisualizacionSimulRosace.asignadorSeMueve;
	}
	protected void jMenuItemAbrirEscenarioActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
		controladorEscSim.peticionAbrirEscenario();
	}
	protected void jMenuItemCrearEscenarioActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
		controladorEscSim.peticionCrearEscenario();
	}
	protected void jMenuItemPararActionPerformed(ActionEvent evt) {
		
		this.controladorEscSim.peticionPararRobot(identRobotSeleccionado);
		jPopupMenuAcionesRobots.setVisible(false);
	}
	protected void jlistIdentsRobotsMouseClicked(MouseEvent evt) {

		if (SwingUtilities.isRightMouseButton(evt)){
			
			
			int index = jlistIdentsRobots.locationToIndex(evt.getPoint());
			//	        notifEvts.sendPeticionPararAgente ((String)identsRobotsEquipo.get(index));
			//      clasificadorV.muestraVentanaEspecifica(listaComponentes.getSelectedValue().toString());
			identRobotSeleccionado = (String)identsRobotsEquipo.get(index);
			this.jPopupMenuAcionesRobots.setLocation(evt.getLocationOnScreen());
			jPopupMenuAcionesRobots.setVisible(true);
		}
	}
	protected void jPararEnvioMensajesActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
		controladorEscSim.peticionPararSimulacion();
	}
	protected void jButtonSendVictimActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
		controladorEscSim.victimaSeleccionadaParaSimulacion(identVictimaSeleccionada);
		identVictimaSeleccionada=null;
	}
	protected void jListIdentsVictimsMouseClicked(MouseEvent evt) {
		if(evt.getClickCount()==2){

			int index = jListIdentsVictims.locationToIndex(evt.getPoint());
			//	        notifEvts.sendPeticionPararAgente ((String)identsRobotsEquipo.get(index));
			//      clasificadorV.muestraVentanaEspecifica(listaComponentes.getSelectedValue().toString());
			identVictimaSeleccionada = (String)this.identsVictimsEquipo.get(index);
		}


	}
	protected void jButtonMostrarEscenarioActualActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
		controladorEscSim.peticionMostrarEscenario();

	}
	private void sendVictimsSequenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendVictimsSequenceActionPerformed
		// Se recoge la informacion que  se debe enviar y se utiliza la clase Notificaciones para enviarlo
		System.out.println("Ha pulsado el botón send victims");
		String valor ; 
		setLocationRelativeTo(this);

		//         String smsg = "Puede cambiar el valor en milisegundos en que deben enviarse las coordenadas";

		String smsg = "Este es el valor en milisegundos leido de la propiedad global \nintervaloMilisegundosEnvioMensajesDesdeCC establecido \n en la descripcion de la organizacion lanzada";         		 
		valor = JOptionPane.showInputDialog(rootPane, smsg, intervaloSecuencia);


		//         String valor = JOptionPane.showInputDialog("Introduce el valor en milisegundos en que deben enviarse las coordenadas");
		//intervalTextField.setText(valor);
		// int v = 0;
		if(valor!=null){
			try{
				intervaloSecuencia = Integer.parseInt(valor);
				jtextTextFieldIntervaloEnvioMensajes.setText(""+intervaloSecuencia);
			}catch(Exception e){
				System.out.println("El valor debe ser  un numero entero");
				intervaloSecuencia = 0;
			}
		}
		while (intervaloSecuencia == 0 ){
			valor = JOptionPane.showInputDialog(rootPane, "El valor debe ser  un numero entero. Introduzca de nuevo el valor del intervalo");
			System.out.println("El valor ha sido : "+valor);
			//intervaloSecuencia = Integer.getInteger(valor) ;
			//if (intervaloSecuencia == null)valor = "";
			if(valor!=null){
				try{
					intervaloSecuencia = Integer.parseInt(valor);
					jtextTextFieldIntervaloEnvioMensajes.setText(""+intervaloSecuencia);
				}catch(Exception e){
					System.out.println("El valor debe ser  un numero entero");
					intervaloSecuencia = 0;
				}
			}else {
				intervaloSecuencia = 1;// si es null es que se ha cancelado y hay que salir
			}
		}
		//         if(valor==null){System.out.println("Se ha cancelado");};

		//System.out.println("El valor ha sido : "+valor);
		jButtonStart.setEnabled(true);

		//            intervalTextField.setOpaque(true);
		//            intervalTextField.setVisible(true);
		//        }
		//         intervalTextField.requestFocusInWindow();
		//         notifEvts.sendInitialRobotCoordenates();
		//         notifEvts.sendFirstSimulatedVictimToRobotTeam();
		//         sendVictimsSequence.setEnabled(false); 
	}//GEN-LAST:event_sendVictimsSequenceActionPerformed

	private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
		// TODO add your handling code here:
		this.controladorEscSim.peticionComenzarSimulacion("", this.intervaloSecuencia);
	}//GEN-LAST:event_jButtonStartActionPerformed

	private void jStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStopActionPerformed
		// TODO add your handling code here:
		//notifEvts.sendPeticionPararSimulacion();
	}//GEN-LAST:event_jStopActionPerformed

	private void jstopRobotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jstopRobotActionPerformed
		// TODO add your handling code here:
		//        this.visorSc.setVisible(true);
		//        this.visorSc.setExtendedState(this.visorSc.ICONIFIED);
		listaComponentes.setVisible(true);
		if ( identsRobotsEquipo == null){}
			//notifEvts.sendPeticionAgteControlador(VocabularioRosace.PeticionAgteControlSimul.enviarIdentsEquipo);
		else this.listaComponentes.setListData(identsRobotsEquipo.toArray());

	}//GEN-LAST:event_jstopRobotActionPerformed

	private void showScenariojButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showScenariojButton2ActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_showScenariojButton2ActionPerformed

	private void listaComponentesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaComponentesMouseClicked
		if (evt.getClickCount() == 2) {
			int index = listaComponentes.locationToIndex(evt.getPoint());
			//notifEvts.sendPeticionPararAgente ((String)identsRobotsEquipo.get(index));
			//      clasificadorV.muestraVentanaEspecifica(listaComponentes.getSelectedValue().toString());

		}
	}//GEN-LAST:event_listaComponentesMouseClicked
	private void setIntervaloEnvioMensajesDesdeCC(int intervalo){
		intervaloSecuencia = intervalo ;
		int intervaloEnvioMensajesDesdeCC = 1000;
		String strintervaloEnvioMensajesDesdeCC = "";
	}
	public void visualizarIdentsEquipoRobot ( ArrayList<String> equipoIds){
		//        eqipoIds = eqipoIds.toArray();
		identsRobotsEquipo = equipoIds;
		this.jlistIdentsRobots.setListData(identsRobotsEquipo.toArray());
		jlistIdentsRobots.setVisible(true);
	}
	public void visualizarIdentsEquipoVictims ( ArrayList<String> equipoIds){
		//      eqipoIds = eqipoIds.toArray();
		identsVictimsEquipo = equipoIds;
		this.jListIdentsVictims.setListData(this.identsVictimsEquipo.toArray());
		jListIdentsVictims.setVisible(true);
	}


	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTextField intervalTextField;
	private javax.swing.JButton jButtonStart;
	private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
	private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JButton jStop;
	private javax.swing.JButton jstopRobot;
	private javax.swing.JList listaComponentes;
	private javax.swing.JButton sendVictimButton;
	private javax.swing.JButton sendVictimsSequence;
	private javax.swing.JButton showScenariojButton2;



	private javax.swing.JButton jButtonComenzar;
	private javax.swing.JButton jButtonMostrarEscenarioActual;
	private javax.swing.JButton jButtonSendVictim;
	private javax.swing.JButton jButtonSendVictimsSequence;
	private javax.swing.JFileChooser jFileChooser1;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JList jListIdentsVictims;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenu jMenu3;
	private javax.swing.JMenuBar jMenuBarEditorEsc;
	private javax.swing.JMenu jMenuEditarEscenario;
	private javax.swing.JMenuItem jMenuItem1;
	private javax.swing.JMenuItem jMenuItem2;
	private javax.swing.JMenuItem jMenuItemAbrirEscenario;
	private javax.swing.JMenuItem jMenuItemCrearEscenario;
	private javax.swing.JMenuItem jMenuItemEliminarEscenario;
	private javax.swing.JMenuItem jMenuItemParar;
	private javax.swing.JMenuItem jMenuItemSalir;
	private javax.swing.JMenuItem jMenuItemVerEstado;
	private javax.swing.JButton jPararEnvioMensajes;
	private javax.swing.JPopupMenu jPopupMenuAcionesRobots;
	private javax.swing.JScrollPane jScrollPaneIdentsRobots;
	private javax.swing.JScrollPane jScrollPanelistaIdentsVictimas;
	private javax.swing.JPopupMenu.Separator jSeparator1;
	private javax.swing.JPopupMenu.Separator jSeparator2;
	private javax.swing.JPopupMenu.Separator jSeparator5;
	private javax.swing.JPopupMenu.Separator jSeparator6;
	private javax.swing.JPopupMenu.Separator jSeparator8;
	private javax.swing.JTextField jTextFieldIdentEscenarioActual;
	private javax.swing.JList jlistIdentsRobots;
	private javax.swing.JTextField jtextTextFieldIntervaloEnvioMensajes;
	private javax.swing.JButton jButtonActivarJerarquico;
	private javax.swing.JComboBox<String> jFuncionEvaluacion;
	// End of variables declaration//GEN-END:variables

	public void setIdentEscenarioActual(String identEscenario) {
		this.jTextFieldIdentEscenarioActual.setText(identEscenario);
		
	}
	public File solicitarSeleccionFichero(String directorioPersistencia){
	      FileNameExtensionFilter filter = new FileNameExtensionFilter("ficheros xml","xml","txt" );
	      jFileChooser1.setFileFilter(filter);
	      File dir = new File(directorioPersistencia);
	      jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);
	      jFileChooser1.setCurrentDirectory(dir);
	     int returnVal = jFileChooser1.showOpenDialog(this);
	      
//	       int returnVal = jFileChooser1.showOpenDialog(this);
	    if (returnVal == JFileChooser.APPROVE_OPTION) {
	        return jFileChooser1.getSelectedFile();
	     }else return null; // no ha seleccionado nada
	     }
	public void visualizarConsejo(String tituloAvisoEscenarioNoDefinido, String mensajeEscenarioNoSeleccionado,String recomendacionDefinirEscenario) {
		JOptionPane.showMessageDialog(rootPane,mensajeEscenarioNoSeleccionado + "  "+ recomendacionDefinirEscenario, tituloAvisoEscenarioNoDefinido,2);
	}
	public void setIdentEquipo(String identEquipoActual) {
		// TODO Auto-generated method stub
		this.identEquipo=identEquipoActual;
	}
}
