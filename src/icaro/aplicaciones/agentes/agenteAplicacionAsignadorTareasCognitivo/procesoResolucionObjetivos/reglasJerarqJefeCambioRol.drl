
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.aplicaciones.Rosace.informacion.*;
import icaro.aplicaciones.Rosace.tareasComunes.*;
import icaro.aplicaciones.Rosace.objetivosComunes.*;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoCognitivo.tareas.*;
import icaro.aplicaciones.agentes.agenteAplicacionAsignadorTareasCognitivo.informacion.*;
import icaro.aplicaciones.agentes.agenteAplicacionAsignadorTareasCognitivo.objetivos.*;
import icaro.aplicaciones.agentes.agenteAplicacionAsignadorTareasCognitivo.tareas.*;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoConCambioRolCognitivo.tareas.*;
import icaro.infraestructura.entidadesBasicas.comunicacion.*;
import java.util.ArrayList;
import java.lang.String;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.InformeDeTarea;
import icaro.aplicaciones.agentes.componentesInternos.movimientoCtrl.*;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

//Primera regla que se ejecutara. Solo se debe disparar una vez.
// Suponemos que el este componente es un robot como el resto del equipo
rule "Generacion de componentes internos"
 when
    not ( exists(InfoCompMovimiento()))
 then
   TareaSincrona tarea3 = gestorTareas.crearTareaAsincrona(CrearComponentesInternos.class);
   tarea3.ejecutar( );             
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());   
    System.out.println( "\n"+agentId +"EJECUTO LA REGLA Acciones Iniciales\n\n" ); 
end
rule "Acciones Iniciales"
 when
    infoCompmov: (InfoCompMovimiento())
    not ( exists(Focus()))
    not ( exists(MisObjetivos()))
 then
   Tarea tarea1 = gestorTareas.crearTarea(InicializarInfoWorkMemCRN.class);
   tarea1.ejecutar(VocabularioRosace.IdentRolAgteDistribuidorTareas,infoCompmov );           
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());   
    System.out.println( "\n"+agentId +"EJECUTO LA REGLA Acciones Iniciales\n\n" ); 
end
// Objetivo Conocer Mi equipo Se conseguira este objetivo cuando el gagte tenga respuestas de los miembros de equipo
// indicandole su equipo y su rol tambien la posicion y estado

rule "Generacion Objetivo Conocer MiEquipo "
// Se genera al principio de la simulacion 
when
    focoActual : Focus(foco == null)
    misObjs: MisObjetivos()
    miStatus: RobotStatus(idRobot == agentId)
    not (exists (DefinirMiEquipo()))
 then
    DefinirMiEquipo definirMiequipoObj = new DefinirMiEquipo(VocabularioRosace.IdentMisionEquipo);
 //se genera y se focaliza
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(GenerarObjetivoyFocalizarlo.class);
    tarea.ejecutar(definirMiequipoObj,misObjs,focoActual); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    System.out.println( "\n"+agentId + "Foco: NULL " +" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Inicio consecucion Objetivo Conocer MiEquipo "
// Consecucion Objetivo Conocer mi equipo
when   
    miEquipo: InfoEquipo(inicioContactoConEquipo== false)
    miStatus: RobotStatus(idRobot == agentId)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ContactarMiembrosEquipo.class);
    tarea.ejecutar(miStatus,miEquipo); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Proceso InfoRol para conseguir Objetivo Conocer MiEquipo "
when   
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    infoRolRecibido: InfoRolAgente(identEquipoAgte == idTeam)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarInfoRolAgente.class);
    tarea.ejecutar(miEquipo,infoRolRecibido); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
// consecucion del objetivo DefinirMiEquipo
// El objetivo se considera conseguido si tengo todas las respuestas posibles o si llega el informe timeout de espera

rule "Proceso timeout para conseguir Objetivo Conocer MiEquipo "
when   
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    misObjs: MisObjetivos()
    infoTarea: InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutContactarMiembrosEquipo)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
// se da por conseguido el objetivo 
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ConseguirObjetivoActualizarFoco.class);
    tarea.ejecutar(misObjs,obj1,focoActual ); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end
//El centro de control manda un mensaje de peticion de ayuda a la victima  
// Si no tengo ningun objetivo focalizado lo atiendo
rule "Proceso una peticion del CC despues de conseguir contactar con mi equipo "
when   
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
    misObjs: MisObjetivos()
    victims2R:VictimsToRescue(victims2Rescue!=null)
    ccOrden:OrdenCentroControl(mensajeOrden == VocabularioRosace.MsgOrdenCCAyudarVictima,victim:justificacion )
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(InterpretarOrdenDelCC.class); //crea el  objetivo ayudar victima
    tarea.ejecutar(misObjs,null,ccOrden,victims2R ); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    System.out.println( "\n"+agentId + "Foco: NULL " +" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());      
end

rule "Proceso una peticion del CC para reconocer terreno"
  when
	focoActual : Focus(foco == null)
	misObjs: MisObjetivos()
	ccOrden:OrdenCentroControl(mensajeOrden == VocabularioRosace.MsgOrdenReconocerTerreno)
  then
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(InterpretarOrdenCCReconocerTerreno.class); 
	tarea.ejecutar(misObjs,ccOrden); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
   
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());      
end


rule "Focalizacion inicial en el  objetivo  para decidir quien reconoce el terreno"
 when
    focoActual : Focus(foco == null)
    obj1 : ReconocerTerreno(state == Objetivo.PENDING) 
    obj :DecidirQuienVa(state == Objetivo.SOLVING, objectReferenceId == VocabularioRosace.MsgExploraTerreno) 
 then
    modify ( focoActual ){
        setFoco(obj)
        };
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
    System.out.println( "\n"+agentId + "Foco: Estoy en  el objetivo "+focoActual.toString()+" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"(ReconocerTerreno ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
   
end

rule "Comenzar la consecucion del objetivo DecidirQuienVa primera vez en reconocer terreno"
  when
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    obj1 : ReconocerTerreno(state == Objetivo.PENDING, idRec: getgoalId()) 
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == VocabularioRosace.MsgExploraTerreno)
    focoActual:Focus(foco == obj )
    not (exists ( InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idRec)))
  then
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoParaDecidir.class);
     tarea.ejecutar(obj, idRec,miEquipo );
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"(ReconocerTerreno ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end
/*
rule "Comenzar la consecucion del objetivo DecidirQuienVa en reconocer terreno"
  when
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    obj1 : ReconocerTerreno(state == Objetivo.PENDING, idRec: getgoalId()) 
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == VocabularioRosace.MsgExploraTerreno)
    focoActual:Focus(foco == obj )
    exists (InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idRec))
  then
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoParaDecidir.class);
     tarea.ejecutar(obj, idRec,miEquipo );
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"(ReconocerTerreno ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end
*/

rule "Pido la evaluacion para realizar el objetivo de reconocer el terreno al equipo de robots "
no-loop true
  when
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == VocabularioRosace.MsgExploraTerreno )
    focoActual:Focus(foco == obj )
    rec:ReconocerTerreno(idRec:getgoalId())
    infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idRec, hanLlegadoTodasLasEvaluaciones== false, peticionEvaluacionEnviadaAtodos == false )
  then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(PedirEvalReconocerAtodos.class);
    tarea.ejecutar(obj,infoDecision, rec);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"(ReconocerTerreno ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end


rule "Me ha llegado una evaluacion de un agente para reconocer el terreno, la proceso hasta que las tenga todas"
no-loop true
 when
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == VocabularioRosace.MsgExploraTerreno)
    focoActual:Focus(foco == obj)
    ReconocerTerreno(idRec:getgoalId())
   infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idRec, peticionEvaluacionEnviadaAtodos == true, hanLlegadoTodasLasEvaluaciones == false)
    evalRecibida:EvaluacionAgente(agente : identAgente ,objectEvaluationId == VocabularioRosace.MsgExploraTerreno)
 then
  TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarEvaluacionRecibida.class);
    tarea.ejecutar(obj,infoDecision,evalRecibida );
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"(ReconocerTerreno ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end



rule " Si tengo todas las evaluaciones asigno el objetivo de reconocer el terreno al agte de mejor evaluacion"
no-loop true
 when
   obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == VocabularioRosace.MsgExploraTerreno)
   focoActual:Focus(foco == obj )
   rec:ReconocerTerreno(idRec:getgoalId())
    misObjs : MisObjetivos()
    infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idRec, heInformadoAlmejorParaQueAsumaElObjetivo == false, hanLlegadoTodasLasEvaluaciones == true)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarPropuestaReconocimientoAlMejorParaQueRealiceObjetivo.class);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"(ReconocerTerreno ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    tarea.ejecutar(obj,infoDecision, misObjs, rec); 
end


rule "Proceso el primer timeout respuestas pido las respuestas que me faltan para reconocer terreno"
  when 
     obj:DecidirQuienVa(state==Objetivo.SOLVING,objectDecisionId == VocabularioRosace.MsgExploraTerreno)
     Focus(foco == obj)
     ReconocerTerreno(idRec:getgoalId())
     infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idRec,peticionEvaluacionEnviadaAtodos == true,hanLlegadoTodasLasEvaluaciones == false)
     informeTarea2:InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutRecibirEvaluaciones1, contenidoInforme == idRec )              
 then
    // Les pido a  los agentes que me faltan  su evaluacion
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(PedirEvaluacionesQueFaltanParaExplorar.class);
    tarea.ejecutar(obj,infoDecision); 
    retract (informeTarea2);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ReconocerTerreno) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end

rule "Proceso el segundo timeout respuestas decido a quien asigno el objetivo reconocer terreno"
	when
     obj:DecidirQuienVa(state==Objetivo.SOLVING,objectDecisionId == VocabularioRosace.MsgExploraTerreno)
     Focus(foco == obj)
      misObjs : MisObjetivos()
      rec:ReconocerTerreno(idRec:getgoalId())
     infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idRec,peticionEvaluacionEnviadaAtodos == true,hanLlegadoTodasLasEvaluaciones == false)
     informeTarea2:InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutRecibirEvaluaciones2, contenidoInforme==idRec )              
     then
    // Les pido a  los agentes que me faltan  su evaluacion
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarPropuestaReconocimientoAlMejorParaQueRealiceObjetivo.class);
    tarea.ejecutar(obj,infoDecision,misObjs, rec); 
    retract (informeTarea2);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end

rule "Actualizar foco cuando recibo victima de explorador"
when
 objDecidir:DecidirQuienVa(state==Objetivo.SOLVING,objectDecisionId==VocabularioRosace.MsgExploraTerreno)
 objReconocer:ReconocerTerreno(state==Objetivo.PENDING)
 focoActual:Focus(foco==objDecidir)
 acept:AceptacionPropuesta(msgAceptacionPropuesta==VocabularioRosace.MsgAceptacionPropuestaExplora)
 //InfoParaDecidirAQuienAsignarObjetivo(heInformadoAlmejorParaQueAsumaElObjetivo==true)
then
 TareaSincrona tarea = gestorTareas.crearTareaSincrona(TareaActualizarFocoReconocedorTerreno.class);
 tarea.ejecutar(objDecidir, objReconocer, focoActual, acept);

end

rule "Creacion del objetivo inicial  de los robots cuando llega un msg del CC"
 salience 200
 when
    focoActual : Focus(foco == null)
    misObjs : MisObjetivos()
    victims2R : VictimsToRescue(victims2Rescue!=null)
    objSimulacion : TerminarSimulacion() 
    ccOrden:OrdenCentroControl(mensajeOrden == VocabularioRosace.MsgOrdenCCAyudarVictima,victim:justificacion)
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(InterpretarOrdenDelCC.class); //crea el  objetivo ayudar victima
 	System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    System.out.println( "\n"+agentId + "Foco: NULL " +" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"(ID Victim: " + ((Victim) victim).getName() + " )EJECUTO LA REGLA: " + drools.getRule().getName());  
    tarea.ejecutar(misObjs,null,ccOrden,victims2R,objSimulacion);  
end

// atiendo la orden y genero los objetivos para cumplirla
rule "Interpreto la orden del CC cuando no estoy implicado en una decision"
salience 100
 when
    misObjs: MisObjetivos()
    victims2R:VictimsToRescue(victims2Rescue!=null)
    victimaCC:Victim($idVict:name)   
    obj1 : AyudarVictima(state == Objetivo.PENDING, victimId == $idVict)
    obj: DecidirQuienVa(objectDecisionId == $idVict,state == Objetivo.SOLVING)
    focoActual : Focus(objFocalizado : foco != null )
    objSimulacion : TerminarSimulacion()
    ccOrden:OrdenCentroControl(mensajeOrden == VocabularioRosace.MsgOrdenCCAyudarVictima,victim : justificacion != victimaCC )
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(InterpretarOrdenDelCC.class); //crea el  objetivo ayudar victima
    tarea.ejecutar(misObjs,objFocalizado,ccOrden,victims2R, objSimulacion); 
    System.out.println( "\n"+$idVict +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"(ID Victim: " + ((Victim) victim).getName() + " ) EJECUTO LA REGLA: " + drools.getRule().getName());      
end
rule "Tratamiento de una orden del CC cuando estoy intentando conseguir un objetivo de ayuda a una Victima, sin decisiones "
salience 10
 when
    misObjs : MisObjetivos(objetivoMasPrioritario !=null)
    ccOrden:OrdenCentroControl(mensajeOrden == VocabularioRosace.MsgOrdenCCAyudarVictima, justif:justificacion )
    victimaCC:Victim($idVict:name) 
    victims2R:VictimsToRescue(victims2Rescue!=null)
    obj :AyudarVictima( victimId == $idVict,state == Objetivo.SOLVING )
    focoActual:Focus(foco == obj)
    exists(DecidirQuienVa ( objectDecisionId == $idVict, state == Objetivo.SOLVED))
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(InterpretarOrdenDelCC.class); //crea otro  objetivo ayudar victima
    tarea.ejecutar(misObjs,obj,ccOrden,victims2R); // poner tambien en la tarea la creacion del objetivo decidir quien va
    System.out.println( "\n"+$idVict +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    System.out.println( "\n"+$idVict + "Foco: Estoy en  el objetivo "+focoActual.toString()+" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas($idVict," EJECUTO LA REGLA: " + drools.getRule().getName()); 
//    depuracion4(agentId,$idVict, drools.getRule().getName(), recursoTrazas);
 //   depuracionDecisionVictima(agentId, drools.getRule().getName(), ccOrden.getJustificacion(), recursoTrazas);      
end

//==========================================================================
//   Reglas de focalizacion objetivo AyudarVictima  
//           
//==========================================================================
//
//-------------------------------------------------------
//   Reglas de focalizacion en objetivo DecidirQuienVa
//-------------------------------------------------------
rule "Focalizacion inicial en el  objetivo  para decidir quien se hace cargo de la ayuda"
 when
    focoActual : Focus(foco == null)
    victimaCC:Victim($idVict:name,isAlive == true)
    obj1 : AyudarVictima(state == Objetivo.PENDING, victimId == $idVict) 
    obj :DecidirQuienVa(state == Objetivo.SOLVING, objectReferenceId == $idVict) 
 then
    modify ( focoActual ){
        setFoco(obj)
    };
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
    System.out.println( "\n"+agentId + "Foco: Estoy en  el objetivo "+focoActual.toString()+" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+$idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
   
end

rule "Re-focalizacion  en el  ultimo objetivo despues de conseguir decidirQuienVa "
 when
    misObjs : MisObjetivos()
    victimaCC:Victim($idVict:name)
    infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == $idVict)
    obj1 :AyudarVictima(state == Objetivo.PENDING, victimId == $idVict)   
    obj: DecidirQuienVa (state == Objetivo.SOLVED,objectDecisionId == $idVict )
    //focoActual:Focus(foco == obj)
    focoActual:Focus()
 then // se eliminan el objetivo ayudar victima y el infoDecision,  y se refocaliza en el ultimo
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(EliminarObjetivoyDecisionInfoActualizarFoco.class); ;
    
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
    System.out.println( "\n"+agentId + "Foco: Estoy en  el objetivo "+focoActual.toString()+" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+$idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
	tarea.ejecutar(misObjs,obj1,infoDecision,focoActual,obj );
end

//==========================================================================
//   Reglas del ciclo de vida de la consecucion del objetivo DecidirQuienVa 
//           
//==========================================================================
//

rule "Comenzar la consecucion del objetivo DecidirQuienVa primera vez"
  when
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    victimaCC:Victim(idVict:name)   
    AyudarVictima(state == Objetivo.PENDING,victimId == idVict)
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict)
    focoActual:Focus(foco == obj )
    not (exists ( InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict)))
  then
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoParaDecidir.class); //mete en el motor un InfoParaDecidirQuienVa inicializado
     tarea.ejecutar(obj, idVict,miEquipo );
     System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end

//===================================================================================================================================

rule "Pido la evaluacion para realizar el objetivo al equipo de robots "
no-loop true
  when
    victimaCC:Victim(idVict:name)   
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict )
    focoActual:Focus(foco == obj )
    infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict,hanLlegadoTodasLasEvaluaciones== false, peticionEvaluacionEnviadaAtodos == false )
    then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(PedirEvalAtodos.class);
    tarea.ejecutar(obj,infoDecision,victimaCC );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +"EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );

 end

rule " Me ha llegado una evaluacion de un agente, la proceso hasta que las tenga todas"
no-loop true
 when
    victimaCC:Victim(idVict:name)   
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict )
    focoActual:Focus(foco == obj )
    infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict, peticionEvaluacionEnviadaAtodos == true, hanLlegadoTodasLasEvaluaciones == false)
    evalRecibida:EvaluacionAgente(agente : identAgente ,objectEvaluationId == idVict )
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarEvaluacionRecibida.class); ;
    tarea.ejecutar(obj,infoDecision,evalRecibida );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + " (Agente: " + agente + " )" + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
 //   depuracion4(agentId,idVict, drools.getRule().getName(), recursoTrazas);     
end
rule " Si tengo todas las evaluaciones asigno el objetivo al agte de mejor evaluacion"
no-loop true
 when
    victimaCC:Victim(idVict:name)   
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict )
    focoActual:Focus(foco == obj )
    misObjs : MisObjetivos()
    v2r: VictimsToRescue(victims2Rescue!=null)
    infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict, heInformadoAlmejorParaQueAsumaElObjetivo == false, hanLlegadoTodasLasEvaluaciones == true)
//    evalRecibida:EvaluacionAgente(identAgente != agentId,objectEvaluationId ==idVict )
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarPropuestaAlMejorParaQueRealiceObjetivo.class);
    
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
    tarea.ejecutar(obj,infoDecision,victimaCC, misObjs, v2r);
 //   depuracion4(agentId,idVict, drools.getRule().getName(), recursoTrazas);     
end

rule "Proceso el primer timeout respuestas pido las respuestas que me faltan"
  when
     victimaCC:Victim(idVict:name)   
 //    exists  AyudarVictima(state == Objetivo.SOLVING,victimId == idVict)
     obj:DecidirQuienVa(state==Objetivo.SOLVING,objectDecisionId == idVict)
     Focus(foco == obj)
     infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict,peticionEvaluacionEnviadaAtodos == true,hanLlegadoTodasLasEvaluaciones == false)
     informeTarea2:InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutRecibirEvaluaciones1, contenidoInforme==idVict )              
 then
    // Les pido a  los agentes que me faltan  su evaluacion
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(PedirEvaluacionesQueFaltan.class);
    tarea.ejecutar(obj,infoDecision,victimaCC ); 
    retract (informeTarea2);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end

rule "Proceso el segundo timeout respuestas decido a quien asigno el objetivo"
  when
     victimaCC:Victim(idVict:name)   
     obj:DecidirQuienVa(state==Objetivo.SOLVING,objectDecisionId == idVict)
     Focus(foco == obj)
     v2r:VictimsToRescue(victims2Rescue!=null)
     misObjs : MisObjetivos()
     infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict,peticionEvaluacionEnviadaAtodos == true,hanLlegadoTodasLasEvaluaciones == false)
     informeTarea2:InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutRecibirEvaluaciones2, contenidoInforme==idVict )              
 then
    // Les pido a  los agentes que me faltan  su evaluacion
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarPropuestaAlMejorParaQueRealiceObjetivo.class);
    tarea.ejecutar(obj,infoDecision,victimaCC,misObjs, v2r); 
    retract (informeTarea2);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end

rule " Si el agente de mejor evaluacion acepta la propuesta resuelvo el objetivo"
 when
    victimaCC:Victim(idVict:name)
    obj1:AyudarVictima(state == Objetivo.PENDING,victimId == idVict)
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict )
    focoActual:Focus(foco == obj )
    infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict, heInformadoAlmejorParaQueAsumaElObjetivo == true)
    aceptPropuesta :AceptacionPropuesta(agenteIdAceptador:identAgente,identObjectRefAcetPropuesta ==idVict )
 then
    modify ( obj ){
            setSolved()
        };
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() +" " +agenteIdAceptador+ "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end

//Clase equivalente a la de aquí encima pero con menos restricciones
rule "Si he aceptado rescatar a una victima  resuelvo el objetivo"
when
	victimaCC:Victim(idVict:name)
	obj1:AyudarVictima(state == Objetivo.PENDING,victimId == idVict)
	obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict )
	//focoActual:Focus(foco == obj)
	infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict, heInformadoAlmejorParaQueAsumaElObjetivo == true)
	informacion: Informacion(mensaje:contenido == VocabularioRosace.JerarquicoAsignadorRescatando)
	then
	retract(informacion);
	modify ( obj ){setSolved()};
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"EJECUTO LA REGLA " + drools.getRule().getName()+  " " + mensaje + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end


rule "Si no hay agente que pueda llegar a la victima la reservo para despues"
 when
    victimaCC:Victim(idVict:name)
    obj1:AyudarVictima(state == Objetivo.PENDING,victimId == idVict)
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict )
    focoActual:Focus(foco == obj )
    infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict, hePreguntadoARobotsYNoHayValido == true, heInformadoAlmejorParaQueAsumaElObjetivo == false)
   // not(exists(aceptPropuesta :AceptacionPropuesta(agenteIdAceptador:identAgente != agentId,identObjectRefAcetPropuesta ==idVict )))
 then
    modify ( obj ){
          setSolved()
    };
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end
rule "Si la victima esta muerta y estaba focalizada, resuelvo el objetivo"
 when
    victimaCC:Victim(idVict:name,isAlive == false)
    obj1:AyudarVictima(state == Objetivo.PENDING,victimId == idVict)
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict )
    focoActual:Focus(foco == obj )
    infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict, hePreguntadoARobotsYNoHayValido == true, heInformadoAlmejorParaQueAsumaElObjetivo == false)
   // not(exists(aceptPropuesta :AceptacionPropuesta(agenteIdAceptador:identAgente != agentId,identObjectRefAcetPropuesta ==idVict )))
 then
    modify ( obj ){
          setSolved()
    };
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end

rule "Proceso el  timeout aceptacion propuesta doy por  asignado el objetivo"
  when
     victimaCC:Victim(idVict:name)
      misObjs : MisObjetivos() 
     obj:DecidirQuienVa(state==Objetivo.SOLVING,objectDecisionId == idVict)
     focoActual:Focus(foco == obj)
     infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict, heInformadoAlmejorParaQueAsumaElObjetivo == true)
     informeTarea2:InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutRecibirConfirmacionesRealizacionObjetivo1, contenidoInforme==idVict )              
 then
    // Doy por resuelto el objetivo
    modify ( obj ){
            setSolved()
        };
    retract (informeTarea2);
  //  TareaSincrona tarea = gestorTareas.crearTareaSincrona(ConseguirObjetivoActualizarFoco.class);
  //  tarea.ejecutar(misObjs,obj,focoActual );

    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end


rule "Una victima no ha sido rescatada a tiempo"
 when
 	informe : Informe(idVict:identEntidadEmisora,idVict == referenciaContexto,contenidoInforme == VocabularioRosace.VictimaFallecida)
 	victimaCC:Victim(idVict == name)
 	obj: TerminarSimulacion()
 then
 	modify(obj){
 		sumarVictima(victimaCC)
 	};
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(VictimaNoRescatadaATiempo.class);
 	tarea.ejecutar(informe, victimaCC);
 	
 	//retract(victimaCC);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");

end

//==========================================================================
//   Reglas para que el agente Asignador se mueva 
//           
//==========================================================================
//

rule "Si me llega una peticion de envio de mi evaluacion del Agte Asignador  la calculo y se la mando"
salience 10
 when    
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    robot:RobotStatus()
    misObjs: MisObjetivos()
    victims2R:VictimsToRescue()
    peticionAgte: PeticionAgente( mensajePeticion == VocabularioRosace.MsgPeticionEnvioEvaluaciones,
                                 identAgente == VocabularioRosace.IdentAgteDistribuidorTareas,victimaCC:justificacion)
  then
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarEvaluacionAlAgteAsignador.class);
     tarea.ejecutar(null,peticionAgte,misObjs,robot,victims2R);
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"REGLA " + drools.getRule().getName());
     System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
  end


rule "Procesar propuesta para que asuma el objetivo cuando no tengo objetivo focalizado "
   when
      victimaCC:Victim(idVict:name)   
//      focoActual : Focus(foco == null)
      misObjs: MisObjetivos()
      miStatus:RobotStatus()
      victims2R:VictimsToRescue(victims2Rescue !=null)
      propuesta:PropuestaAgente (msgPropuesta:mensajePropuesta == VocabularioRosace.MsgPropuesta_Para_Aceptar_Objetivo,identObjectRefPropuesta == idVict)
      not( exists ( AceptacionPropuesta(propuestaAceptada == propuesta  )))
   then
      TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarPropuestaParaAsumirObjetivo.class);
      recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
      System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );    
      tarea.ejecutar(null,miStatus,misObjs,victims2R,propuesta );                 
end

rule "Si he aceptado la propuesta para asumir el objetivo lo genero y encolo"
no-loop true
   when
      victimaCC:Victim(idVict:name)   
      focoActual : Focus()
      infoComMov :InfoCompMovimiento()
      misObjs: MisObjetivos()
      victims2R:VictimsToRescue()
      robot:RobotStatus()
      acPropuesta:AceptacionPropuesta (identAgente == agentId,identObjectRefAcetPropuesta == idVict)
   then
      TareaSincrona tarea = gestorTareas.crearTareaSincrona(GeneraryEncolarObjetivoActualizarFocoNC.class);
      recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
      System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" ); 
      tarea.ejecutar(misObjs,focoActual,victimaCC,acPropuesta,infoComMov,victims2R,robot);                    
end


rule "He llegado a la victima y pongo el objetivo ayudarVictima a Solved"
when
	inf:Informe(nombreVictima : referenciaContexto,VocabularioRosace.MsgeLlegadaDestino==contenidoInforme)
	ayudarvictima : AyudarVictima(victimId == nombreVictima)
	victim : Victim(name == nombreVictima)
	v2r : VictimsToRescue(victims2Rescue !=null)
	robotS : RobotStatus()
	misObjs : MisObjetivos()
then
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName() + nombreVictima);
	modify(ayudarvictima){
		setSolved()
	}
	modify(v2r){
		setRescued(nombreVictima)
	}
	
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(ComprobarVictimasNoAsignadas.class);
	tarea.ejecutar(v2r, robotS, misObjs, inf,victim);
	
end

rule "Aumentar las victimas resueltas por victima salvada"
when
	inf:Informe(victim : contenidoInforme,VocabularioRosace.MsgVictimaResuelta==referenciaContexto)
	obj: TerminarSimulacion()
then
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
	modify(obj){
		sumarVictima((Victim)victim)
	};
	retract(inf);
end


rule "Compruebo si es el fin de simulacion"
 when
	obj:TerminarSimulacion(victimasResueltas == VocabularioRosace.victimasTotalesASalvar)
 then
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(FinalizarSimulacion.class);
	tarea.ejecutar(obj);
end
