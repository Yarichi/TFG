import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.aplicaciones.Rosace.informacion.*;
import icaro.aplicaciones.Rosace.tareasComunes.*;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoCognitivo.tareas.*;
import icaro.aplicaciones.agentes.agenteAplicacionAsignadorTareasCognitivo.informacion.*;
import icaro.aplicaciones.agentes.agenteAplicacionAsignadorTareasCognitivo.objetivos.*;
import icaro.aplicaciones.agentes.agenteAplicacionAsignadorTareasCognitivo.tareas.*;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoConCambioRolCognitivo.tareas.*;
import icaro.infraestructura.entidadesBasicas.comunicacion.*;
import java.util.ArrayList;
import java.lang.String;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.InformeDeTarea;
import icaro.aplicaciones.agentes.componentesInternos.movimientoCtrl.*;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

rule "Generacion de componentes internos"
 when
    not ( exists(InfoCompMovimiento()))
 then
   TareaSincrona tarea3 = gestorTareas.crearTareaAsincrona(CrearComponentesInternos.class);
   tarea3.ejecutar( );             
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());   
    System.out.println( "\n"+agentId +"EJECUTO LA REGLA Acciones Iniciales\n\n" ); 
end


rule "Acciones iniciales"
 when
  not(exists(Focus()))
  not(exists(MisObjetivos()))
  compMov:InfoCompMovimiento()
 then
 Tarea tarea = gestorTareas.crearTarea(InicializarInfoWorkMemCRN.class);
 //tarea.ejecutar(VocabularioRosace.IdentRolAgteDistribuidorTareas, compMov);
end


rule "Generacion Objetivo Conocer MiEquipo "
when
    focoActual : Focus(foco == null)
    misObjs: MisObjetivos()
    miStatus: RobotStatus(idRobot == agentId)
    not (exists (DefinirMiEquipo()))
 then
    DefinirMiEquipo definirMiequipoObj = new DefinirMiEquipo(VocabularioRosace.IdentMisionEquipo);
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(GenerarObjetivoyFocalizarlo.class);
    tarea.ejecutar(definirMiequipoObj,misObjs,focoActual); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    System.out.println( "\n"+agentId + "Foco: NULL " +" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end



rule "Inicio consecucion Objetivo Conocer MiEquipo "
when   
    miEquipo: InfoEquipo(inicioContactoConEquipo== false)
    miStatus: RobotStatus(idRobot == agentId)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ContactarMiembrosEquipo.class);
    tarea.ejecutar(miStatus,miEquipo); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end



rule "Proceso InfoRol para conseguir Objetivo Conocer MiEquipo "
when   
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    infoRolRecibido: InfoRolAgente(identEquipoAgte == idTeam)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarInfoRolAgente.class);
    tarea.ejecutar(miEquipo,infoRolRecibido); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end



rule "Proceso timeout para conseguir Objetivo Conocer MiEquipo "
when   
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    misObjs: MisObjetivos()
    infoTarea: InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutContactarMiembrosEquipo)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
// se da por conseguido el objetivo 
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ConseguirObjetivoActualizarFoco.class);
    tarea.ejecutar(misObjs,obj1,focoActual ); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());     
end



rule "Proceso una peticion del CC despues de conseguir contactar con mi equipo "
when   
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
    misObjs: MisObjetivos()
    victims2R:VictimsToRescue(victims2Rescue!=null)
    ccOrden:OrdenCentroControl(mensajeOrden == VocabularioRosace.MsgOrdenCCAyudarVictima,victim:justificacion )
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(InterpretarOrdenDelCC.class); //crea el  objetivo ayudar victima
    tarea.ejecutar(misObjs,null,ccOrden,victims2R ); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    System.out.println( "\n"+agentId + "Foco: NULL " +" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());      
end



rule "Proceso una peticion del CC para reconocer terreno"
  when
	focoActual : Focus(foco == null)
	misObjs: MisObjetivos()
	ccOrden:OrdenCentroControl(mensajeOrden == VocabularioRosace.MsgOrdenReconocerTerreno)
  then
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(InterpretarOrdenCCReconocerTerreno.class); 
	tarea.ejecutar(misObjs,ccOrden); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
   
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());      
end

rule "Focalizacion inicial en el  objetivo  para decidir quien reconoce el terreno"
 when
    focoActual : Focus(foco == null)
    obj1 : ReconocerTerreno(state == Objetivo.PENDING) 
    obj :DecidirQuienVa(state == Objetivo.SOLVING, objectReferenceId == VocabularioRosace.MsgExploraTerreno) 
 then
    modify ( focoActual ){
        setFoco(obj)
        };
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
    System.out.println( "\n"+agentId + "Foco: Estoy en  el objetivo "+focoActual.toString()+" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"(ReconocerTerreno ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n"); 
end

rule "Comenzar la consecucion del objetivo DecidirQuienVa primera vez en reconocer terreno"
  when
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    obj1 : ReconocerTerreno(state == Objetivo.PENDING, idRec: getgoalId()) 
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == VocabularioRosace.MsgExploraTerreno)
    focoActual:Focus(foco == obj )
    not (exists ( InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idRec)))
  then
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoParaDecidir.class);
     tarea.ejecutar(obj, idRec,miEquipo );
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"(ReconocerTerreno ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end

rule "Comenzar la consecucion del objetivo DecidirQuienVa en reconocer terreno"
  when
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    obj1 : ReconocerTerreno(state == Objetivo.PENDING, idRec: getgoalId()) 
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == VocabularioRosace.MsgExploraTerreno)
    focoActual:Focus(foco == obj )
    exists (InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idRec))
  then
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoParaDecidir.class);
     tarea.ejecutar(obj, idRec,miEquipo );
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"(ReconocerTerreno ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end

rule "Pido la evaluacion para realizar el objetivo de reconocer el terreno al equipo de robots "
no-loop true
  when
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == VocabularioRosace.MsgExploraTerreno )
    focoActual:Focus(foco == obj )
    rec:ReconocerTerreno(idRec:getgoalId())
    infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idRec, hanLlegadoTodasLasEvaluaciones== false, peticionEvaluacionEnviadaAtodos == false )
  then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(PedirEvalReconocerAtodos.class);
    tarea.ejecutar(obj,infoDecision, rec);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"(ReconocerTerreno ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end

rule "Me ha llegado una evaluacion de un agente para reconocer el terreno, la proceso hasta que las tenga todas"
no-loop true
 when
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == VocabularioRosace.MsgExploraTerreno)
    focoActual:Focus(foco == obj)
    ReconocerTerreno(idRec:getgoalId())
   infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idRec, peticionEvaluacionEnviadaAtodos == true, hanLlegadoTodasLasEvaluaciones == false)
    evalRecibida:EvaluacionAgente(agente : identAgente ,objectEvaluationId == VocabularioRosace.MsgExploraTerreno)
 then
  TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarEvaluacionRecibida.class);
    tarea.ejecutar(obj,infoDecision,evalRecibida );
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"(ReconocerTerreno ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end

rule " Si tengo todas las evaluaciones asigno el objetivo de reconocer el terreno al agte de mejor evaluacion"
no-loop true
 when
   obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == VocabularioRosace.MsgExploraTerreno)
   focoActual:Focus(foco == obj )
   rec:ReconocerTerreno(idRec:getgoalId())
    misObjs : MisObjetivos()
    infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idRec, heInformadoAlmejorParaQueAsumaElObjetivo == false, hanLlegadoTodasLasEvaluaciones == true)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarPropuestaReconocimientoAlMejorParaQueRealiceObjetivo.class);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"(ReconocerTerreno ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    tarea.ejecutar(obj,infoDecision, misObjs, rec); 
end

rule "Proceso el primer timeout respuestas pido las respuestas que me faltan para reconocer terreno"
  when 
     obj:DecidirQuienVa(state==Objetivo.SOLVING,objectDecisionId == VocabularioRosace.MsgExploraTerreno)
     Focus(foco == obj)
     ReconocerTerreno(idRec:getgoalId())
     infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idRec,peticionEvaluacionEnviadaAtodos == true,hanLlegadoTodasLasEvaluaciones == false)
     informeTarea2:InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutRecibirEvaluaciones1, contenidoInforme==VocabularioRosace.MsgExploraTerreno )              
 then
    // Les pido a  los agentes que me faltan  su evaluacion
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(PedirEvaluacionesQueFaltanParaExplorar.class);
    tarea.ejecutar(obj,infoDecision); 
    retract (informeTarea2);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ReconocerTerreno) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end

rule "Proceso el segundo timeout respuestas decido a quien asigno el objetivo reconocer terreno"
	when
     obj:DecidirQuienVa(state==Objetivo.SOLVING,objectDecisionId == VocabularioRosace.MsgExploraTerreno)
     Focus(foco == obj)
      misObjs : MisObjetivos()
      rec:ReconocerTerreno(idRec:getgoalId())
     infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idRec,peticionEvaluacionEnviadaAtodos == true,hanLlegadoTodasLasEvaluaciones == false)
     informeTarea2:InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutRecibirEvaluaciones2, contenidoInforme==VocabularioRosace.MsgExploraTerreno )              
     then
    // Les pido a  los agentes que me faltan  su evaluacion
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarPropuestaReconocimientoAlMejorParaQueRealiceObjetivo.class);
    tarea.ejecutar(obj,infoDecision,misObjs, rec); 
    retract (informeTarea2);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end

rule "Actualizar foco cuando recibo victima de explorador"
when
 objDecidir:DecidirQuienVa(state==Objetivo.SOLVING,objectDecisionId==VocabularioRosace.MsgExploraTerreno)
 objReconocer:ReconocerTerreno(state==Objetivo.PENDING)
 focoActual:Focus(foco==objDecidir)
 acept:AceptacionPropuesta(msgAceptacionPropuesta==VocabularioRosace.MsgAceptacionPropuestaExplora)
 //InfoParaDecidirAQuienAsignarObjetivo(heInformadoAlmejorParaQueAsumaElObjetivo==true)
then
 TareaSincrona tarea = gestorTareas.crearTareaSincrona(TareaActualizarFocoReconocedorTerreno.class);
 tarea.ejecutar(objDecidir, objReconocer, focoActual, acept);
end



rule "Creacion del objetivo inicial  de los robots cuando llega un msg del CC"
salience 10
 when
    focoActual : Focus(foco == null)
    misObjs: MisObjetivos()
    victims2R:VictimsToRescue(victims2Rescue!=null)
    ccOrden:OrdenCentroControl(mensajeOrden == VocabularioRosace.MsgOrdenCCAyudarVictima,victim:justificacion)
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(InterpretarOrdenDelCC.class); //crea el  objetivo ayudar victima
 	System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    System.out.println( "\n"+agentId + "Foco: NULL " +" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());  
    tarea.ejecutar(misObjs,null,ccOrden,victims2R );  
end

rule "Interpreto la orden del CC cuando no estoy implicado en una decision"
 when
    misObjs: MisObjetivos()
    victims2R:VictimsToRescue(victims2Rescue!=null)
    victimaCC:Victim($idVict:name)   
    obj1 : AyudarVictima(state == Objetivo.PENDING, victimId == $idVict)
    obj: DecidirQuienVa(objectDecisionId == $idVict,state == Objetivo.SOLVING)
    focoActual : Focus(objFocalizado : foco != obj )
    ccOrden:OrdenCentroControl(mensajeOrden == VocabularioRosace.MsgOrdenCCAyudarVictima,justificacion != victimaCC )
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(InterpretarOrdenDelCC.class); //crea el  objetivo ayudar victima
    tarea.ejecutar(misObjs,objFocalizado,ccOrden,victims2R ); 
    System.out.println( "\n"+$idVict +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas($idVict," EJECUTO LA REGLA: " + drools.getRule().getName());      
end

rule "Tratamiento de una orden del CC cuando estoy intentando conseguir un objetivo de ayuda a una Victima, sin decisiones "
salience 10
 when
    misObjs : MisObjetivos(objetivoMasPrioritario !=null)
    ccOrden:OrdenCentroControl(mensajeOrden == VocabularioRosace.MsgOrdenCCAyudarVictima, justif:justificacion )
    victimaCC:Victim($idVict:name) 
    victims2R:VictimsToRescue(victims2Rescue!=null)
    obj :AyudarVictima( victimId == $idVict,state == Objetivo.SOLVING )
    focoActual:Focus(foco == obj)
    exists DecidirQuienVa ( objectDecisionId == $idVict, state == Objetivo.SOLVED)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(InterpretarOrdenDelCC.class);
    tarea.ejecutar(misObjs,obj,ccOrden,victims2R);
    System.out.println( "\n"+$idVict +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    System.out.println( "\n"+$idVict + "Foco: Estoy en  el objetivo "+focoActual.toString()+" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas($idVict," EJECUTO LA REGLA: " + drools.getRule().getName());     
end

rule "Focalizacion inicial en el  objetivo  para decidir quien se hace cargo de la ayuda"
 when
    focoActual : Focus(foco == null)
    victimaCC:Victim($idVict:name,isAlive == true)
    obj1 : AyudarVictima(state == Objetivo.PENDING, victimId == $idVict) 
    obj :DecidirQuienVa(state == Objetivo.SOLVING, objectReferenceId == $idVict) 
 then
    modify ( focoActual ){
        setFoco(obj)
    };
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
    System.out.println( "\n"+agentId + "Foco: Estoy en  el objetivo "+focoActual.toString()+" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+$idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end

rule "Re-focalizacion  en el  ultimo objetivo despues de conseguir decidirQuienVa "
 when
    misObjs : MisObjetivos($objPrio:objetivoMasPrioritario)
    victimaCC:Victim($idVict:name,isAlive == true)
    infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == $idVict)
    obj1 :AyudarVictima(state == Objetivo.PENDING, victimId == $idVict)   
    obj: DecidirQuienVa (state == Objetivo.SOLVED,objectDecisionId == $idVict )
    //focoActual:Focus(foco == obj)
    focoActual:Focus()
 then // se eliminan el objetivo ayudar victima y el infoDecision,  y se refocaliza en el ultimo
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(EliminarObjetivoyDecisionInfoActualizarFoco.class); ;
    
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
    System.out.println( "\n"+agentId + "Foco: Estoy en  el objetivo "+focoActual.toString()+" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+$idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
	tarea.ejecutar(misObjs,obj1,infoDecision,focoActual,obj );
end

rule "Comenzar la consecucion del objetivo DecidirQuienVa primera vez"
  when
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    victimaCC:Victim(idVict:name)   
    AyudarVictima(state == Objetivo.PENDING,victimId == idVict)
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict)
    focoActual:Focus(foco == obj )
    not (exists ( InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict)))
  then
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoParaDecidir.class); //mete en el motor un InfoParaDecidirQuienVa inicializado
     tarea.ejecutar(obj, idVict,miEquipo );
     System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end

rule "Pido la evaluacion para realizar el objetivo al equipo de robots "
no-loop true
  when
    victimaCC:Victim(idVict:name)   
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict )
    focoActual:Focus(foco == obj )
    infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict,hanLlegadoTodasLasEvaluaciones== false, peticionEvaluacionEnviadaAtodos == false )
  then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(PedirEvalAtodos.class);
    tarea.ejecutar(obj,infoDecision,victimaCC );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +"EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
 end

 rule " Me ha llegado una evaluacion de un agente, la proceso hasta que las tenga todas"
no-loop true
 when
    victimaCC:Victim(idVict:name)   
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict )
    focoActual:Focus(foco == obj )
    infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict, peticionEvaluacionEnviadaAtodos == true, hanLlegadoTodasLasEvaluaciones == false)
    evalRecibida:EvaluacionAgente(agente : identAgente ,objectEvaluationId == idVict )
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarEvaluacionRecibida.class); ;
    tarea.ejecutar(obj,infoDecision,evalRecibida );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + " (Agente: " + agente + " )" + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end

rule " Si tengo todas las evaluaciones asigno el objetivo al agte de mejor evaluacion"
no-loop true
 when
    victimaCC:Victim(idVict:name)   
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict )
    focoActual:Focus(foco == obj )
    misObjs : MisObjetivos()
    v2r: VictimsToRescue(victims2Rescue!=null)
    infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict, heInformadoAlmejorParaQueAsumaElObjetivo == false, hanLlegadoTodasLasEvaluaciones == true)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarPropuestaAlMejorParaQueRealiceObjetivo.class);
    
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
    tarea.ejecutar(obj,infoDecision,victimaCC, misObjs, v2r);    
end

rule "Proceso el primer timeout respuestas pido las respuestas que me faltan"
  when
     victimaCC:Victim(idVict:name)
     obj:DecidirQuienVa(state==Objetivo.SOLVING,objectDecisionId == idVict)
     Focus(foco == obj)
     infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict,peticionEvaluacionEnviadaAtodos == true,hanLlegadoTodasLasEvaluaciones == false)
     informeTarea2:InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutRecibirEvaluaciones1, contenidoInforme==idVict )              
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(PedirEvaluacionesQueFaltan.class);
    tarea.ejecutar(obj,infoDecision,victimaCC, informeTarea2);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end

rule "Si el agente de mejor evaluacion acepta la propuesta resuelvo el objetivo"
 when
 	Victim(idVict:name)
 	AyudarVictima(state==Objetivo.PENDING, victimId==idVict)
 	objDecidir:DecidirQuienVa(state==Objetivo.SOLVING,objectDecisionId==idVict)
 	Focus(foco==objDecidir)
 	InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision==idVict, heInformadoAlmejorParaQueAsumaElObjetivo==true)
 	AceptacionPropuesta(agenteIdAceptador:identAgente, identObjectRefAcetPropuesta==idVict)
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(DoyObjetivoPorAsignado.class);
 	tarea.ejecutar(objDecidir);
end

rule "Proceso el segundo timeout respuestas decido a quien asigno el objetivo"
  when
     victimaCC:Victim(idVict:name)   
     obj:DecidirQuienVa(state==Objetivo.SOLVING,objectDecisionId == idVict)
     Focus(foco == obj)
     v2r:VictimsToRescue(victims2Rescue!=null)
     misObjs : MisObjetivos()
     infoDecision: InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict,peticionEvaluacionEnviadaAtodos == true,hanLlegadoTodasLasEvaluaciones == false)
     informeTarea2:InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutRecibirEvaluaciones2, contenidoInforme==idVict )              
 then
    // Les pido a  los agentes que me faltan  su evaluacion
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarPropuestaAlMejorParaQueRealiceObjetivo.class);
    tarea.ejecutar(obj,infoDecision,victimaCC,misObjs, v2r, informeTarea2);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end

rule "Si no hay agente que pueda llegar a la victima la reservo para despues"
 when
    Victim(idVict:name)
    AyudarVictima(state == Objetivo.PENDING,victimId == idVict)
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict )
    Focus(foco == obj )
    InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict, hePreguntadoARobotsYNoHayValido == true, heInformadoAlmejorParaQueAsumaElObjetivo == false)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(DoyObjetivoPorAsignado.class);
    tarea.ejecutar(obj);
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end

rule "Proceso el timeout aceptacion propuesta y doy por asignado el objetivo"
 when
 Victim(idVict:name)
 dec:DecidirQuienVa(state==Objetivo.SOLVING,objectDecisionId == idVict)//, objectDecisionId
 Focus(foco==dec)
 InfoParaDecidirAQuienAsignarObjetivo(idElementoDecision == idVict, heInformadoAlmejorParaQueAsumaElObjetivo == true)
 inf:InformeDeTarea(identTarea==VocabularioRosace.IdentTareaTimeOutRecibirConfirmacionesRealizacionObjetivo1, contenidoInforme==idVict)
 then
 TareaSincrona tarea = gestorTareas.crearTareaSincrona(DoyObjetivoPorAsignado.class);
 tarea.ejecutar(dec);
 retract(inf);
end

rule "Una victima ha muerto"
 when
 informe:InformeVictimaMuerta()
 then
 TareaSincrona tarea = gestorTareas.crearTareaSincrona(VictimaNoRescatadaATiempo.class);
 tarea.ejecutar(informe);
end

rule "Si me llega una peticion de envio de mi evaluacion del Agte Asignador  la calculo y se la mando"
salience 10
 when    
    miEquipo: InfoEquipo(idTeam:teamId,inicioContactoConEquipo== true)
    robot:RobotStatus()
    misObjs: MisObjetivos()
    victims2R:VictimsToRescue()
    peticionAgte: PeticionAgente( mensajePeticion == VocabularioRosace.MsgPeticionEnvioEvaluaciones,identAgente == VocabularioRosace.IdentAgteDistribuidorTareas,victimaCC:justificacion)
  then
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarEvaluacionAlAgteAsignador.class);
     tarea.ejecutar(null,peticionAgte,misObjs,robot,victims2R);
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"REGLA " + drools.getRule().getName());
     System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
  end
  
rule "Procesar propuesta para que asuma el objetivo cuando no tengo objetivo focalizado "
   when
      victimaCC:Victim(idVict:name)
      misObjs: MisObjetivos()
      miStatus:RobotStatus()
      victims2R:VictimsToRescue(victims2Rescue !=null)
      propuesta:PropuestaAgente (msgPropuesta:mensajePropuesta == VocabularioRosace.MsgPropuesta_Para_Aceptar_Objetivo,identObjectRefPropuesta == idVict)
      not( exists ( AceptacionPropuesta(propuestaAceptada == propuesta  )))
   then
      TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarPropuestaParaAsumirObjetivo.class);
      recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
      System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );    
      tarea.ejecutar(null,miStatus,misObjs,victims2R,propuesta );                 
end

rule "Si he aceptado la propuesta para asumir el objetivo lo genero y encolo"
no-loop true
   when
      victimaCC:Victim(idVict:name)   
      focoActual : Focus()
      infoComMov :InfoCompMovimiento()
      misObjs: MisObjetivos()
      victims2R:VictimsToRescue()
      robot:RobotStatus()
      acPropuesta:AceptacionPropuesta (identAgente == agentId,identObjectRefAcetPropuesta == idVict)
   then
      TareaSincrona tarea = gestorTareas.crearTareaSincrona(GeneraryEncolarObjetivoActualizarFocoNC.class);
      recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
      System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" ); 
      tarea.ejecutar(misObjs,focoActual,victimaCC,acPropuesta,infoComMov,victims2R,robot);                    
end


rule "He llegado a la victima y pongo el objetivo ayudarVictima a Solved"
when
	informe : Informe(nombreVictima : referenciaContexto,VocabularioRosace.MsgeLlegadaDestino==contenidoInforme)
	ayudarvictima : AyudarVictima(victimId == nombreVictima)
	v2r : VictimsToRescue(victims2Rescue !=null)
	robotS : RobotStatus()
	misObjs : MisObjetivos()
then
	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName() + nombreVictima);
	modify(ayudarvictima){
		setSolved()
	}
	modify(v2r){
		setRescued(nombreVictima)
	}
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(ComprobarVictimasNoAsignadas.class);
	tarea.ejecutar(v2r, robotS, misObjs,informe);	
end